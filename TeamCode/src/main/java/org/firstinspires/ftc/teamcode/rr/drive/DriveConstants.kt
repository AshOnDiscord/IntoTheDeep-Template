package org.firstinspires.ftc.teamcode.rr.drive

import com.acmerobotics.dashboard.config.Config
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot
import com.qualcomm.hardware.rev.RevHubOrientationOnRobot.UsbFacingDirection
import com.qualcomm.robotcore.hardware.PIDFCoefficients

/*
 * Constants shared between multiple drive types.
 *
 * Constants generated by LearnRoadRunner.com/drive-constants
 */
@Config
object DriveConstants {
    /*
     * These are motor constants that should be listed online for your motors.
     */
    const val TICKS_PER_REV: Double = 384.5
    const val MAX_RPM: Double = 435.0

    /*
     * Set RUN_USING_ENCODER to true to enable built-in hub velocity control using drive encoders.
     * Set this flag to false if drive encoders are not present and an alternative localization
     * method is in use (e.g., tracking wheels).
     *
     * If using the built-in motor velocity PID, update MOTOR_VELO_PID with the tuned coefficients
     * from DriveVelocityPIDTuner.
     */
    const val RUN_USING_ENCODER: Boolean = false
    var MOTOR_VELO_PID: PIDFCoefficients = PIDFCoefficients(
        0.0,
        0.0,
        0.0,
        getMotorVelocityF(MAX_RPM / 60 * TICKS_PER_REV)
    )

    /*
     * These are physical constants that can be determined from your robot (including the track
     * width; it will be tune empirically later although a rough estimate is important). Users are
     * free to chose whichever linear distance unit they would like so long as it is consistently
     * used. The default values were selected with inches in mind. Road runner uses radians for
     * angular distances although most angular parameters are wrapped in Math.toRadians() for
     * convenience. Make sure to exclude any gear ratio included in MOTOR_CONFIG from GEAR_RATIO.
     */
    @JvmField
    var WHEEL_RADIUS: Double = 2.0 // in

    @JvmField
    var GEAR_RATIO: Double = 1.0 // output (wheel) speed / input (motor) speed

    @JvmField
    var TRACK_WIDTH: Double = 15.0 // in

    /*
     * These are the feedforward parameters used to model the drive motor behavior. If you are using
     * the built-in velocity PID, *these values are fine as is*. However, if you do not have drive
     * motor encoders or have elected not to use them for velocity control, these values should be
     * empirically tuned.
     */
    @JvmField
    var kV: Double = 1.0 / rpmToVelocity(MAX_RPM)

    @JvmField
    var kA: Double = 0.0

    @JvmField
    var kStatic: Double = 0.0

    /*
     * These values are used to generate the trajectories for you robot. To ensure proper operation,
     * the constraints should never exceed ~80% of the robot's actual capabilities. While Road
     * Runner is designed to enable faster autonomous motion, it is a good idea for testing to start
     * small and gradually increase them later after everything is working. All distance units are
     * inches.
     */
    /*
     * Note from LearnRoadRunner.com:
     * The velocity and acceleration constraints were calculated based on the following equation:
     * ((MAX_RPM / 60) * GEAR_RATIO * WHEEL_RADIUS * 2 * Math.PI) * 0.85
     * Resulting in 77.4402589109884 in/s.
     * This is only 85% of the theoretical maximum velocity of the bot, following the recommendation above.
     * This is capped at 85% because there are a number of variables that will prevent your bot from actually
     * reaching this maximum velocity: voltage dropping over the game,
     * bot weight, general mechanical inefficiencies, etc.
     * However, you can push this higher yourself if you'd like. Perhaps raise it to 90-95% of the theoretically
     * max velocity. The theoretically maximum velocity is 91.106186954104 in/s.
     * Just make sure that your bot can actually reach this maximum velocity. Path following will be detrimentally
     * affected if it is aiming for a velocity not actually possible.
     *
     * The maximum acceleration is somewhat arbitrary and it is recommended that you tweak this yourself based on
     * actual testing. Just set it at a reasonable value and keep increasing until your path following starts
     * to degrade. As of now, it simply mirrors the velocity, resulting in 77.4402589109884 in/s/s
     *
     * Maximum Angular Velocity is calculated as: maximum velocity / trackWidth * (180 / Math.PI) but capped at 360Â°/s.
     * You are free to raise this on your own if you would like. It is best determined through experimentation.

     */
    @JvmField
    var MAX_VEL: Double = 77.4402589109884

    @JvmField
    var MAX_ACCEL: Double = 77.4402589109884

    @JvmField
    var MAX_ANG_VEL: Double = Math.toRadians(246.50000000000003)

    @JvmField
    var MAX_ANG_ACCEL: Double = Math.toRadians(246.50000000000003)

    /*
     * Adjust the orientations here to match your robot. See the FTC SDK documentation for details.
     */
    @JvmField
    var LOGO_FACING_DIR: RevHubOrientationOnRobot.LogoFacingDirection =
        RevHubOrientationOnRobot.LogoFacingDirection.RIGHT

    @JvmField
    var USB_FACING_DIR: UsbFacingDirection = UsbFacingDirection.UP

    fun encoderTicksToInches(ticks: Double): Double {
        return WHEEL_RADIUS * 2 * Math.PI * GEAR_RATIO * ticks / TICKS_PER_REV
    }

    fun rpmToVelocity(rpm: Double): Double {
        return rpm * GEAR_RATIO * 2 * Math.PI * WHEEL_RADIUS / 60.0
    }

    fun getMotorVelocityF(ticksPerSecond: Double): Double {
        // see https://docs.google.com/document/d/1tyWrXDfMidwYyP_5H4mZyVgaEswhOC35gvdmP-V-5hA/edit#heading=h.61g9ixenznbx
        return 32767 / ticksPerSecond
    }
}
